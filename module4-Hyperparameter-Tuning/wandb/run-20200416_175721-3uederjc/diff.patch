diff --git a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
index 7b8a8f4..7e6fdd7 100644
--- a/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
+++ b/module4-Hyperparameter-Tuning/LS_DS_424_Hyperparameter_Tuning_Lecture.ipynb
@@ -46,8 +46,8 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "wandb_group = \"ds8\"\n",
-    "wandb_project = \"inclass\""
+    "wandb_group = \"...\"\n",
+    "wandb_project = \"...\""
    ]
   },
   {
@@ -81,7 +81,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -106,7 +106,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [
     {
@@ -170,7 +170,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 4,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -187,164 +187,164 @@
      "text": [
       "Train on 404 samples, validate on 102 samples\n",
       "Epoch 1/75\n",
-      "404/404 [==============================] - 2s 4ms/sample - loss: 498.2045 - mse: 498.2046 - mae: 20.2543 - val_loss: 421.5039 - val_mse: 421.5038 - val_mae: 18.3349\n",
+      "404/404 [==============================] - 0s 890us/sample - loss: 513.8346 - mse: 513.8347 - mae: 20.7149 - val_loss: 443.7642 - val_mse: 443.7643 - val_mae: 19.0293\n",
       "Epoch 2/75\n",
-      "404/404 [==============================] - 0s 347us/sample - loss: 249.6985 - mse: 249.6985 - mae: 13.2672 - val_loss: 111.3743 - val_mse: 111.3743 - val_mae: 8.6210\n",
+      "404/404 [==============================] - 0s 131us/sample - loss: 283.0637 - mse: 283.0638 - mae: 14.5453 - val_loss: 144.4158 - val_mse: 144.4158 - val_mae: 10.1233\n",
       "Epoch 3/75\n",
-      "404/404 [==============================] - 0s 344us/sample - loss: 56.6755 - mse: 56.6755 - mae: 5.4817 - val_loss: 39.1997 - val_mse: 39.1997 - val_mae: 4.9872\n",
+      "404/404 [==============================] - 0s 117us/sample - loss: 76.9413 - mse: 76.9413 - mae: 6.6502 - val_loss: 52.0278 - val_mse: 52.0278 - val_mae: 5.6831\n",
       "Epoch 4/75\n",
-      "404/404 [==============================] - 0s 364us/sample - loss: 28.3243 - mse: 28.3243 - mae: 3.7054 - val_loss: 26.9866 - val_mse: 26.9866 - val_mae: 4.0796\n",
+      "404/404 [==============================] - 0s 120us/sample - loss: 37.2391 - mse: 37.2391 - mae: 4.4698 - val_loss: 34.5686 - val_mse: 34.5686 - val_mae: 4.6617\n",
       "Epoch 5/75\n",
-      "404/404 [==============================] - 0s 382us/sample - loss: 20.5281 - mse: 20.5281 - mae: 3.1209 - val_loss: 24.6172 - val_mse: 24.6172 - val_mae: 3.8052\n",
+      "404/404 [==============================] - 0s 128us/sample - loss: 26.7912 - mse: 26.7912 - mae: 3.7529 - val_loss: 28.4664 - val_mse: 28.4664 - val_mae: 4.2078\n",
       "Epoch 6/75\n",
-      "404/404 [==============================] - 0s 393us/sample - loss: 17.9283 - mse: 17.9283 - mae: 2.8665 - val_loss: 23.6524 - val_mse: 23.6524 - val_mae: 3.6746\n",
+      "404/404 [==============================] - 0s 122us/sample - loss: 22.8896 - mse: 22.8896 - mae: 3.4851 - val_loss: 25.8370 - val_mse: 25.8370 - val_mae: 4.0110\n",
       "Epoch 7/75\n",
-      "404/404 [==============================] - 0s 440us/sample - loss: 16.9179 - mse: 16.9179 - mae: 2.8781 - val_loss: 23.4620 - val_mse: 23.4620 - val_mae: 3.5778\n",
+      "404/404 [==============================] - 0s 107us/sample - loss: 19.8453 - mse: 19.8453 - mae: 3.1307 - val_loss: 23.3642 - val_mse: 23.3642 - val_mae: 3.7637\n",
       "Epoch 8/75\n",
-      "404/404 [==============================] - 0s 366us/sample - loss: 15.1579 - mse: 15.1579 - mae: 2.6440 - val_loss: 24.1374 - val_mse: 24.1374 - val_mae: 3.5929\n",
+      "404/404 [==============================] - 0s 135us/sample - loss: 18.1124 - mse: 18.1124 - mae: 3.0374 - val_loss: 22.5300 - val_mse: 22.5300 - val_mae: 3.6116\n",
       "Epoch 9/75\n",
-      "404/404 [==============================] - 0s 367us/sample - loss: 14.1717 - mse: 14.1717 - mae: 2.5937 - val_loss: 24.4829 - val_mse: 24.4829 - val_mae: 3.5639\n",
+      "404/404 [==============================] - 0s 121us/sample - loss: 16.3055 - mse: 16.3055 - mae: 2.8844 - val_loss: 21.9367 - val_mse: 21.9367 - val_mae: 3.4770\n",
       "Epoch 10/75\n",
-      "404/404 [==============================] - 0s 359us/sample - loss: 13.5002 - mse: 13.5002 - mae: 2.5633 - val_loss: 25.0170 - val_mse: 25.0170 - val_mae: 3.5601\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 15.2862 - mse: 15.2862 - mae: 2.7504 - val_loss: 20.5867 - val_mse: 20.5867 - val_mae: 3.3470\n",
       "Epoch 11/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 12.8641 - mse: 12.8641 - mae: 2.4963 - val_loss: 25.1162 - val_mse: 25.1162 - val_mae: 3.5449\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 13.8689 - mse: 13.8689 - mae: 2.6119 - val_loss: 21.2590 - val_mse: 21.2590 - val_mae: 3.3637\n",
       "Epoch 12/75\n",
-      "404/404 [==============================] - 0s 351us/sample - loss: 12.4033 - mse: 12.4033 - mae: 2.5224 - val_loss: 25.0382 - val_mse: 25.0382 - val_mae: 3.4858\n",
+      "404/404 [==============================] - 0s 112us/sample - loss: 13.0506 - mse: 13.0506 - mae: 2.5623 - val_loss: 21.4920 - val_mse: 21.4920 - val_mae: 3.3018\n",
       "Epoch 13/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 12.2653 - mse: 12.2653 - mae: 2.4637 - val_loss: 26.7274 - val_mse: 26.7274 - val_mae: 3.6054\n",
+      "404/404 [==============================] - 0s 117us/sample - loss: 12.2040 - mse: 12.2040 - mae: 2.4840 - val_loss: 21.1842 - val_mse: 21.1842 - val_mae: 3.2265\n",
       "Epoch 14/75\n",
-      "404/404 [==============================] - 0s 368us/sample - loss: 11.8249 - mse: 11.8249 - mae: 2.4648 - val_loss: 25.2347 - val_mse: 25.2347 - val_mae: 3.4602\n",
+      "404/404 [==============================] - 0s 128us/sample - loss: 11.8914 - mse: 11.8914 - mae: 2.4310 - val_loss: 21.6532 - val_mse: 21.6532 - val_mae: 3.2361\n",
       "Epoch 15/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 11.3965 - mse: 11.3965 - mae: 2.4134 - val_loss: 25.3070 - val_mse: 25.3070 - val_mae: 3.4305\n",
+      "404/404 [==============================] - 0s 126us/sample - loss: 11.1879 - mse: 11.1879 - mae: 2.3668 - val_loss: 20.4971 - val_mse: 20.4971 - val_mae: 3.1413\n",
       "Epoch 16/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 11.0982 - mse: 11.0982 - mae: 2.3616 - val_loss: 25.0599 - val_mse: 25.0599 - val_mae: 3.3784\n",
+      "404/404 [==============================] - 0s 120us/sample - loss: 10.8619 - mse: 10.8619 - mae: 2.3732 - val_loss: 21.8411 - val_mse: 21.8411 - val_mae: 3.1718\n",
       "Epoch 17/75\n",
-      "404/404 [==============================] - 0s 365us/sample - loss: 11.1969 - mse: 11.1969 - mae: 2.3806 - val_loss: 25.1976 - val_mse: 25.1976 - val_mae: 3.3732\n",
+      "404/404 [==============================] - 0s 123us/sample - loss: 10.4103 - mse: 10.4103 - mae: 2.2851 - val_loss: 22.0088 - val_mse: 22.0088 - val_mae: 3.1898\n",
       "Epoch 18/75\n",
-      "404/404 [==============================] - 0s 369us/sample - loss: 10.9278 - mse: 10.9278 - mae: 2.3653 - val_loss: 24.2875 - val_mse: 24.2875 - val_mae: 3.3114\n",
+      "404/404 [==============================] - 0s 122us/sample - loss: 10.4522 - mse: 10.4522 - mae: 2.3412 - val_loss: 23.1280 - val_mse: 23.1280 - val_mae: 3.2474\n",
       "Epoch 19/75\n",
-      "404/404 [==============================] - 0s 365us/sample - loss: 10.5854 - mse: 10.5854 - mae: 2.3170 - val_loss: 26.1450 - val_mse: 26.1450 - val_mae: 3.3971\n",
+      "404/404 [==============================] - 0s 124us/sample - loss: 9.8749 - mse: 9.8749 - mae: 2.2453 - val_loss: 21.9905 - val_mse: 21.9905 - val_mae: 3.1079\n",
       "Epoch 20/75\n",
-      "404/404 [==============================] - 0s 401us/sample - loss: 10.2546 - mse: 10.2546 - mae: 2.2813 - val_loss: 26.5278 - val_mse: 26.5278 - val_mae: 3.4465\n",
+      "404/404 [==============================] - 0s 108us/sample - loss: 9.7358 - mse: 9.7358 - mae: 2.2509 - val_loss: 22.4762 - val_mse: 22.4762 - val_mae: 3.1153\n",
       "Epoch 21/75\n",
-      "404/404 [==============================] - 0s 380us/sample - loss: 10.1321 - mse: 10.1321 - mae: 2.2866 - val_loss: 24.0363 - val_mse: 24.0363 - val_mae: 3.2792\n",
+      "404/404 [==============================] - 0s 128us/sample - loss: 9.4541 - mse: 9.4541 - mae: 2.1785 - val_loss: 21.3578 - val_mse: 21.3578 - val_mae: 3.0183\n",
       "Epoch 22/75\n",
-      "404/404 [==============================] - 0s 421us/sample - loss: 9.9169 - mse: 9.9169 - mae: 2.2907 - val_loss: 23.7310 - val_mse: 23.7310 - val_mae: 3.2334\n",
+      "404/404 [==============================] - 0s 110us/sample - loss: 9.3880 - mse: 9.3880 - mae: 2.1957 - val_loss: 21.6412 - val_mse: 21.6412 - val_mae: 3.0596\n",
       "Epoch 23/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 9.6588 - mse: 9.6588 - mae: 2.2284 - val_loss: 23.6472 - val_mse: 23.6472 - val_mae: 3.2013\n",
+      "404/404 [==============================] - 0s 112us/sample - loss: 9.1570 - mse: 9.1570 - mae: 2.1461 - val_loss: 22.0300 - val_mse: 22.0300 - val_mae: 3.0506\n",
       "Epoch 24/75\n",
-      "404/404 [==============================] - 0s 363us/sample - loss: 9.6887 - mse: 9.6887 - mae: 2.2468 - val_loss: 23.5379 - val_mse: 23.5379 - val_mae: 3.1921\n",
+      "404/404 [==============================] - 0s 112us/sample - loss: 9.1329 - mse: 9.1329 - mae: 2.1431 - val_loss: 23.1995 - val_mse: 23.1995 - val_mae: 3.1056\n",
       "Epoch 25/75\n",
-      "404/404 [==============================] - 0s 373us/sample - loss: 9.4049 - mse: 9.4049 - mae: 2.1999 - val_loss: 23.7713 - val_mse: 23.7713 - val_mae: 3.2273\n",
+      "404/404 [==============================] - 0s 106us/sample - loss: 9.5874 - mse: 9.5874 - mae: 2.2188 - val_loss: 22.2335 - val_mse: 22.2335 - val_mae: 3.0228\n",
       "Epoch 26/75\n",
-      "404/404 [==============================] - 0s 359us/sample - loss: 9.2304 - mse: 9.2304 - mae: 2.1946 - val_loss: 23.5093 - val_mse: 23.5093 - val_mae: 3.2072\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 8.8284 - mse: 8.8284 - mae: 2.1277 - val_loss: 21.8492 - val_mse: 21.8492 - val_mae: 2.9903\n",
       "Epoch 27/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 9.0493 - mse: 9.0493 - mae: 2.1528 - val_loss: 23.7969 - val_mse: 23.7969 - val_mae: 3.2005\n",
+      "404/404 [==============================] - 0s 116us/sample - loss: 8.5301 - mse: 8.5301 - mae: 2.1038 - val_loss: 20.5209 - val_mse: 20.5209 - val_mae: 2.9053\n",
       "Epoch 28/75\n",
-      "404/404 [==============================] - 0s 359us/sample - loss: 8.9363 - mse: 8.9363 - mae: 2.1475 - val_loss: 22.1030 - val_mse: 22.1030 - val_mae: 3.0707\n",
+      "404/404 [==============================] - 0s 125us/sample - loss: 8.6493 - mse: 8.6493 - mae: 2.1079 - val_loss: 20.9380 - val_mse: 20.9380 - val_mae: 2.9103\n",
       "Epoch 29/75\n",
-      "404/404 [==============================] - 0s 373us/sample - loss: 8.7834 - mse: 8.7834 - mae: 2.1231 - val_loss: 22.5153 - val_mse: 22.5153 - val_mae: 3.1532\n",
+      "404/404 [==============================] - 0s 109us/sample - loss: 8.5171 - mse: 8.5171 - mae: 2.0552 - val_loss: 19.9898 - val_mse: 19.9898 - val_mae: 2.8693\n",
       "Epoch 30/75\n",
-      "404/404 [==============================] - 0s 371us/sample - loss: 8.7925 - mse: 8.7925 - mae: 2.1531 - val_loss: 22.0449 - val_mse: 22.0449 - val_mae: 3.1245\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 8.2472 - mse: 8.2472 - mae: 2.0461 - val_loss: 21.5911 - val_mse: 21.5911 - val_mae: 2.9413\n",
       "Epoch 31/75\n",
-      "404/404 [==============================] - 0s 374us/sample - loss: 9.1879 - mse: 9.1879 - mae: 2.2029 - val_loss: 22.1780 - val_mse: 22.1780 - val_mae: 3.0623\n",
+      "404/404 [==============================] - 0s 114us/sample - loss: 8.2117 - mse: 8.2117 - mae: 2.0037 - val_loss: 22.5330 - val_mse: 22.5330 - val_mae: 2.9894\n",
       "Epoch 32/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 8.7136 - mse: 8.7136 - mae: 2.1164 - val_loss: 21.9815 - val_mse: 21.9815 - val_mae: 3.0969\n",
+      "404/404 [==============================] - 0s 115us/sample - loss: 8.4828 - mse: 8.4828 - mae: 2.0627 - val_loss: 20.9939 - val_mse: 20.9939 - val_mae: 2.8569\n",
       "Epoch 33/75\n",
-      "404/404 [==============================] - 0s 371us/sample - loss: 8.3018 - mse: 8.3018 - mae: 2.0639 - val_loss: 21.0477 - val_mse: 21.0477 - val_mae: 2.9645\n",
+      "404/404 [==============================] - 0s 104us/sample - loss: 8.1114 - mse: 8.1114 - mae: 2.0244 - val_loss: 20.7026 - val_mse: 20.7026 - val_mae: 2.8406\n",
       "Epoch 34/75\n",
-      "404/404 [==============================] - 0s 362us/sample - loss: 8.4156 - mse: 8.4156 - mae: 2.0970 - val_loss: 22.6659 - val_mse: 22.6659 - val_mae: 3.1235\n",
+      "404/404 [==============================] - 0s 118us/sample - loss: 8.3723 - mse: 8.3723 - mae: 2.0676 - val_loss: 19.5654 - val_mse: 19.5654 - val_mae: 2.7929\n",
       "Epoch 35/75\n",
-      "404/404 [==============================] - 0s 350us/sample - loss: 8.2938 - mse: 8.2938 - mae: 2.0567 - val_loss: 20.9574 - val_mse: 20.9574 - val_mae: 2.9746\n",
+      "404/404 [==============================] - 0s 118us/sample - loss: 7.9960 - mse: 7.9960 - mae: 1.9996 - val_loss: 20.1154 - val_mse: 20.1154 - val_mae: 2.8190\n",
       "Epoch 36/75\n",
-      "404/404 [==============================] - 0s 357us/sample - loss: 8.0515 - mse: 8.0515 - mae: 2.0591 - val_loss: 23.2063 - val_mse: 23.2063 - val_mae: 3.1980\n",
+      "404/404 [==============================] - 0s 104us/sample - loss: 7.6907 - mse: 7.6907 - mae: 1.9592 - val_loss: 20.0204 - val_mse: 20.0204 - val_mae: 2.8088\n",
       "Epoch 37/75\n",
-      "404/404 [==============================] - 0s 381us/sample - loss: 8.1403 - mse: 8.1403 - mae: 2.0584 - val_loss: 24.5238 - val_mse: 24.5237 - val_mae: 3.3531\n",
+      "404/404 [==============================] - 0s 120us/sample - loss: 7.7279 - mse: 7.7279 - mae: 1.9758 - val_loss: 20.8513 - val_mse: 20.8513 - val_mae: 2.8607\n",
       "Epoch 38/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 8.0043 - mse: 8.0043 - mae: 2.0776 - val_loss: 22.5424 - val_mse: 22.5424 - val_mae: 3.1494\n",
+      "404/404 [==============================] - 0s 112us/sample - loss: 7.6152 - mse: 7.6152 - mae: 1.9824 - val_loss: 21.1071 - val_mse: 21.1071 - val_mae: 2.8915\n",
       "Epoch 39/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 8.1182 - mse: 8.1182 - mae: 2.0683 - val_loss: 19.7576 - val_mse: 19.7576 - val_mae: 2.8799\n",
+      "404/404 [==============================] - 0s 120us/sample - loss: 7.7180 - mse: 7.7180 - mae: 1.9705 - val_loss: 19.2083 - val_mse: 19.2083 - val_mae: 2.7653\n",
       "Epoch 40/75\n",
-      "404/404 [==============================] - 0s 374us/sample - loss: 7.8578 - mse: 7.8578 - mae: 2.0131 - val_loss: 20.7728 - val_mse: 20.7728 - val_mae: 2.9499\n",
+      "404/404 [==============================] - 0s 117us/sample - loss: 7.5878 - mse: 7.5878 - mae: 1.9502 - val_loss: 21.2970 - val_mse: 21.2970 - val_mae: 2.9067\n",
       "Epoch 41/75\n",
-      "404/404 [==============================] - 0s 382us/sample - loss: 7.5711 - mse: 7.5711 - mae: 1.9896 - val_loss: 20.6170 - val_mse: 20.6170 - val_mae: 2.9936\n",
+      "404/404 [==============================] - 0s 106us/sample - loss: 7.3463 - mse: 7.3463 - mae: 1.9255 - val_loss: 19.6089 - val_mse: 19.6089 - val_mae: 2.7442\n",
       "Epoch 42/75\n",
-      "404/404 [==============================] - 0s 385us/sample - loss: 7.5822 - mse: 7.5822 - mae: 1.9683 - val_loss: 20.8541 - val_mse: 20.8541 - val_mae: 3.0054\n",
+      "404/404 [==============================] - 0s 125us/sample - loss: 7.3199 - mse: 7.3198 - mae: 1.9422 - val_loss: 19.1240 - val_mse: 19.1240 - val_mae: 2.7055\n",
       "Epoch 43/75\n",
-      "404/404 [==============================] - 0s 408us/sample - loss: 7.4533 - mse: 7.4533 - mae: 1.9645 - val_loss: 20.4473 - val_mse: 20.4473 - val_mae: 2.8861\n",
+      "404/404 [==============================] - 0s 117us/sample - loss: 7.4306 - mse: 7.4306 - mae: 1.9352 - val_loss: 19.8845 - val_mse: 19.8845 - val_mae: 2.9722\n",
       "Epoch 44/75\n",
-      "404/404 [==============================] - 0s 396us/sample - loss: 7.5226 - mse: 7.5226 - mae: 1.9509 - val_loss: 20.5193 - val_mse: 20.5193 - val_mae: 2.9619\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 7.3700 - mse: 7.3700 - mae: 1.9318 - val_loss: 20.0328 - val_mse: 20.0328 - val_mae: 2.8241\n",
       "Epoch 45/75\n",
-      "404/404 [==============================] - 0s 355us/sample - loss: 7.2819 - mse: 7.2819 - mae: 1.9350 - val_loss: 21.4862 - val_mse: 21.4862 - val_mae: 2.9908\n",
+      "404/404 [==============================] - 0s 123us/sample - loss: 7.0266 - mse: 7.0266 - mae: 1.8657 - val_loss: 19.1209 - val_mse: 19.1209 - val_mae: 2.7551\n",
       "Epoch 46/75\n",
-      "404/404 [==============================] - 0s 354us/sample - loss: 7.0130 - mse: 7.0130 - mae: 1.9152 - val_loss: 20.1577 - val_mse: 20.1577 - val_mae: 2.9370\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 7.3101 - mse: 7.3101 - mae: 1.9244 - val_loss: 18.4282 - val_mse: 18.4282 - val_mae: 2.6846\n",
       "Epoch 47/75\n",
-      "404/404 [==============================] - 0s 375us/sample - loss: 6.9431 - mse: 6.9431 - mae: 1.8819 - val_loss: 21.1210 - val_mse: 21.1210 - val_mae: 2.9746\n",
+      "404/404 [==============================] - 0s 111us/sample - loss: 7.1323 - mse: 7.1323 - mae: 1.8976 - val_loss: 19.2919 - val_mse: 19.2919 - val_mae: 2.7821\n",
       "Epoch 48/75\n",
-      "404/404 [==============================] - 0s 371us/sample - loss: 6.8982 - mse: 6.8982 - mae: 1.9037 - val_loss: 19.2999 - val_mse: 19.2999 - val_mae: 2.8638\n",
+      "404/404 [==============================] - 0s 152us/sample - loss: 6.8553 - mse: 6.8553 - mae: 1.8353 - val_loss: 20.0819 - val_mse: 20.0819 - val_mae: 2.7655\n",
       "Epoch 49/75\n",
-      "404/404 [==============================] - 0s 368us/sample - loss: 6.9521 - mse: 6.9521 - mae: 1.8862 - val_loss: 20.7825 - val_mse: 20.7825 - val_mae: 2.9369\n",
+      "404/404 [==============================] - 0s 150us/sample - loss: 7.0347 - mse: 7.0347 - mae: 1.8935 - val_loss: 20.1882 - val_mse: 20.1882 - val_mae: 2.7659\n",
       "Epoch 50/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 6.8718 - mse: 6.8718 - mae: 1.8889 - val_loss: 20.0288 - val_mse: 20.0288 - val_mae: 2.8915\n",
+      "404/404 [==============================] - 0s 139us/sample - loss: 6.6524 - mse: 6.6524 - mae: 1.8393 - val_loss: 18.8763 - val_mse: 18.8763 - val_mae: 2.7063\n",
       "Epoch 51/75\n",
-      "404/404 [==============================] - 0s 354us/sample - loss: 6.7111 - mse: 6.7111 - mae: 1.8702 - val_loss: 20.4913 - val_mse: 20.4913 - val_mae: 3.0116\n",
+      "404/404 [==============================] - 0s 125us/sample - loss: 6.6571 - mse: 6.6571 - mae: 1.8302 - val_loss: 19.3104 - val_mse: 19.3104 - val_mae: 2.7426\n",
       "Epoch 52/75\n",
-      "404/404 [==============================] - 0s 361us/sample - loss: 6.7492 - mse: 6.7492 - mae: 1.8482 - val_loss: 18.3008 - val_mse: 18.3008 - val_mae: 2.7362\n",
+      "404/404 [==============================] - 0s 132us/sample - loss: 6.7430 - mse: 6.7430 - mae: 1.8683 - val_loss: 18.3749 - val_mse: 18.3749 - val_mae: 2.6536\n",
       "Epoch 53/75\n",
-      "404/404 [==============================] - 0s 356us/sample - loss: 6.6262 - mse: 6.6262 - mae: 1.8395 - val_loss: 18.1885 - val_mse: 18.1885 - val_mae: 2.6920\n",
+      "404/404 [==============================] - 0s 135us/sample - loss: 6.4310 - mse: 6.4310 - mae: 1.8138 - val_loss: 18.1573 - val_mse: 18.1573 - val_mae: 2.6049\n",
       "Epoch 54/75\n",
-      "404/404 [==============================] - 0s 369us/sample - loss: 6.7148 - mse: 6.7148 - mae: 1.8611 - val_loss: 18.5764 - val_mse: 18.5764 - val_mae: 2.6977\n",
+      "404/404 [==============================] - 0s 122us/sample - loss: 6.5062 - mse: 6.5062 - mae: 1.8124 - val_loss: 19.0887 - val_mse: 19.0887 - val_mae: 2.6514\n",
       "Epoch 55/75\n",
-      "404/404 [==============================] - 0s 358us/sample - loss: 6.5425 - mse: 6.5425 - mae: 1.8522 - val_loss: 19.5772 - val_mse: 19.5772 - val_mae: 2.8326\n",
+      "404/404 [==============================] - 0s 128us/sample - loss: 6.5441 - mse: 6.5441 - mae: 1.7929 - val_loss: 20.3125 - val_mse: 20.3125 - val_mae: 2.9023\n",
       "Epoch 56/75\n",
-      "404/404 [==============================] - 0s 423us/sample - loss: 6.3349 - mse: 6.3349 - mae: 1.8175 - val_loss: 19.0932 - val_mse: 19.0932 - val_mae: 2.8260\n",
+      "404/404 [==============================] - 0s 120us/sample - loss: 6.3951 - mse: 6.3951 - mae: 1.7898 - val_loss: 18.1510 - val_mse: 18.1510 - val_mae: 2.6020\n",
       "Epoch 57/75\n",
-      "404/404 [==============================] - 0s 375us/sample - loss: 6.4253 - mse: 6.4253 - mae: 1.7972 - val_loss: 20.4036 - val_mse: 20.4036 - val_mae: 2.9258\n",
+      "404/404 [==============================] - 0s 110us/sample - loss: 6.2128 - mse: 6.2128 - mae: 1.7519 - val_loss: 17.6949 - val_mse: 17.6949 - val_mae: 2.6273\n",
       "Epoch 58/75\n",
-      "404/404 [==============================] - 0s 362us/sample - loss: 6.2897 - mse: 6.2897 - mae: 1.7785 - val_loss: 21.2845 - val_mse: 21.2845 - val_mae: 3.0715\n",
+      "404/404 [==============================] - 0s 109us/sample - loss: 6.1540 - mse: 6.1540 - mae: 1.7571 - val_loss: 18.1725 - val_mse: 18.1725 - val_mae: 2.6488\n",
       "Epoch 59/75\n",
-      "404/404 [==============================] - 0s 378us/sample - loss: 6.7839 - mse: 6.7839 - mae: 1.9027 - val_loss: 18.6853 - val_mse: 18.6853 - val_mae: 2.7709\n",
+      "404/404 [==============================] - 0s 124us/sample - loss: 6.1289 - mse: 6.1289 - mae: 1.7578 - val_loss: 18.1833 - val_mse: 18.1833 - val_mae: 2.6408\n",
       "Epoch 60/75\n",
-      "404/404 [==============================] - 0s 395us/sample - loss: 6.7178 - mse: 6.7178 - mae: 1.8871 - val_loss: 19.5394 - val_mse: 19.5394 - val_mae: 2.8101\n",
+      "404/404 [==============================] - 0s 118us/sample - loss: 6.0567 - mse: 6.0567 - mae: 1.7571 - val_loss: 18.9873 - val_mse: 18.9873 - val_mae: 2.7297\n",
       "Epoch 61/75\n",
-      "404/404 [==============================] - 0s 366us/sample - loss: 6.4152 - mse: 6.4152 - mae: 1.8175 - val_loss: 18.2377 - val_mse: 18.2377 - val_mae: 2.7450\n",
+      "404/404 [==============================] - 0s 109us/sample - loss: 6.3034 - mse: 6.3034 - mae: 1.7928 - val_loss: 18.6318 - val_mse: 18.6318 - val_mae: 2.6862\n",
       "Epoch 62/75\n",
-      "404/404 [==============================] - 0s 384us/sample - loss: 5.9727 - mse: 5.9727 - mae: 1.7630 - val_loss: 19.0252 - val_mse: 19.0252 - val_mae: 2.7960\n",
+      "404/404 [==============================] - 0s 110us/sample - loss: 6.1608 - mse: 6.1608 - mae: 1.7922 - val_loss: 16.7990 - val_mse: 16.7990 - val_mae: 2.5746\n",
       "Epoch 63/75\n",
-      "404/404 [==============================] - 0s 380us/sample - loss: 6.0973 - mse: 6.0973 - mae: 1.8071 - val_loss: 18.8069 - val_mse: 18.8069 - val_mae: 2.8894\n",
+      "404/404 [==============================] - 0s 116us/sample - loss: 5.8298 - mse: 5.8298 - mae: 1.7042 - val_loss: 17.7788 - val_mse: 17.7788 - val_mae: 2.5696\n",
       "Epoch 64/75\n",
-      "404/404 [==============================] - 0s 362us/sample - loss: 6.1074 - mse: 6.1074 - mae: 1.7978 - val_loss: 18.4702 - val_mse: 18.4702 - val_mae: 2.7851\n",
+      "404/404 [==============================] - 0s 119us/sample - loss: 5.8477 - mse: 5.8477 - mae: 1.7113 - val_loss: 17.6459 - val_mse: 17.6459 - val_mae: 2.5892\n",
       "Epoch 65/75\n",
-      "404/404 [==============================] - 0s 369us/sample - loss: 5.9329 - mse: 5.9329 - mae: 1.7545 - val_loss: 18.5321 - val_mse: 18.5321 - val_mae: 2.7933\n",
+      "404/404 [==============================] - 0s 111us/sample - loss: 5.8696 - mse: 5.8696 - mae: 1.7212 - val_loss: 17.3178 - val_mse: 17.3178 - val_mae: 2.5273\n",
       "Epoch 66/75\n",
-      "404/404 [==============================] - 0s 341us/sample - loss: 5.7473 - mse: 5.7473 - mae: 1.7211 - val_loss: 18.5536 - val_mse: 18.5536 - val_mae: 2.8010\n",
+      "404/404 [==============================] - 0s 126us/sample - loss: 5.6410 - mse: 5.6410 - mae: 1.6882 - val_loss: 17.1583 - val_mse: 17.1583 - val_mae: 2.6116\n",
       "Epoch 67/75\n",
-      "404/404 [==============================] - 0s 339us/sample - loss: 5.8866 - mse: 5.8866 - mae: 1.7224 - val_loss: 18.0067 - val_mse: 18.0067 - val_mae: 2.7054\n",
+      "404/404 [==============================] - 0s 118us/sample - loss: 5.4984 - mse: 5.4984 - mae: 1.6847 - val_loss: 17.2747 - val_mse: 17.2747 - val_mae: 2.5357\n",
       "Epoch 68/75\n",
-      "404/404 [==============================] - 0s 337us/sample - loss: 5.7885 - mse: 5.7885 - mae: 1.7391 - val_loss: 17.5502 - val_mse: 17.5502 - val_mae: 2.6767\n",
+      "404/404 [==============================] - 0s 109us/sample - loss: 5.4466 - mse: 5.4466 - mae: 1.6739 - val_loss: 17.1037 - val_mse: 17.1037 - val_mae: 2.5481\n",
       "Epoch 69/75\n",
-      "404/404 [==============================] - 0s 331us/sample - loss: 5.8809 - mse: 5.8809 - mae: 1.7542 - val_loss: 17.0280 - val_mse: 17.0280 - val_mae: 2.6404\n",
+      "404/404 [==============================] - 0s 117us/sample - loss: 5.4992 - mse: 5.4992 - mae: 1.6887 - val_loss: 15.9501 - val_mse: 15.9501 - val_mae: 2.5021\n",
       "Epoch 70/75\n",
-      "404/404 [==============================] - 0s 343us/sample - loss: 5.6028 - mse: 5.6028 - mae: 1.6972 - val_loss: 17.7188 - val_mse: 17.7188 - val_mae: 2.6979\n",
+      "404/404 [==============================] - 0s 128us/sample - loss: 5.5987 - mse: 5.5987 - mae: 1.6752 - val_loss: 16.8631 - val_mse: 16.8631 - val_mae: 2.5534\n",
       "Epoch 71/75\n",
-      "404/404 [==============================] - 0s 337us/sample - loss: 5.4361 - mse: 5.4361 - mae: 1.6741 - val_loss: 16.8852 - val_mse: 16.8852 - val_mae: 2.6126\n",
+      "404/404 [==============================] - 0s 122us/sample - loss: 5.3204 - mse: 5.3204 - mae: 1.6445 - val_loss: 17.3415 - val_mse: 17.3415 - val_mae: 2.5463\n",
       "Epoch 72/75\n",
-      "404/404 [==============================] - 0s 345us/sample - loss: 5.5608 - mse: 5.5608 - mae: 1.7252 - val_loss: 16.7483 - val_mse: 16.7483 - val_mae: 2.6063\n",
+      "404/404 [==============================] - 0s 133us/sample - loss: 5.1899 - mse: 5.1899 - mae: 1.6233 - val_loss: 16.8225 - val_mse: 16.8225 - val_mae: 2.5400\n",
       "Epoch 73/75\n",
-      "404/404 [==============================] - 0s 341us/sample - loss: 5.5022 - mse: 5.5022 - mae: 1.6912 - val_loss: 17.6786 - val_mse: 17.6786 - val_mae: 2.7316\n",
+      "404/404 [==============================] - 0s 131us/sample - loss: 5.1717 - mse: 5.1717 - mae: 1.6224 - val_loss: 16.2467 - val_mse: 16.2467 - val_mae: 2.4909\n",
       "Epoch 74/75\n",
-      "404/404 [==============================] - 0s 396us/sample - loss: 5.2794 - mse: 5.2794 - mae: 1.6478 - val_loss: 17.6115 - val_mse: 17.6115 - val_mae: 2.6773\n",
+      "404/404 [==============================] - 0s 117us/sample - loss: 5.0368 - mse: 5.0368 - mae: 1.5894 - val_loss: 16.5270 - val_mse: 16.5270 - val_mae: 2.5364\n",
       "Epoch 75/75\n",
-      "404/404 [==============================] - 0s 338us/sample - loss: 5.4796 - mse: 5.4796 - mae: 1.6876 - val_loss: 17.2835 - val_mse: 17.2835 - val_mae: 2.7126\n"
+      "404/404 [==============================] - 0s 134us/sample - loss: 5.0872 - mse: 5.0872 - mae: 1.6146 - val_loss: 16.7601 - val_mse: 16.7601 - val_mae: 2.5428\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x7f36340c6b38>"
+       "<tensorflow.python.keras.callbacks.History at 0x7f93240c5400>"
       ]
      },
-     "execution_count": 3,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -404,7 +404,7 @@
     "\n",
     "#### 4) Bayesian Methods\n",
     "\n",
-    "One thing that can make more manual methods like babysitting and gridsearch effective is that as the experimenter sees results he can then make updates to his future searches taking into account the results of past specifications. If only we could hyperparameter tune our hyperparameter tuning. Well, we kind of can. Enter Bayesian Optimization. Neural Networks are like an optimization problem within an optimization problem, and Bayesian Optimization is a search strategy that tries to take into account the results of past searches in order to improve future ones. This is the most advanced method but can be a little bit tricky to implement, but there are some early steps with `hyperas` which is Bayesian optimization wrapper for `keras`. "
+    "One thing that can make more manual methods like babysitting and gridsearch effective is that as the experimenter sees results he can then make updates to his future searches taking into account the results of past specifications. If only we could hyperparameter tune our hyperparameter tuning. Well, we kind of can. Enter Bayesian Optimization. Neural Networks are like an optimization problem within an optimization problem, and Bayesian Optimization is a search strategy that tries to take into account the results of past searches in order to improve future ones. Check out the new library `keras-tuner` for easy implementations of Bayesian methods. \n"
    ]
   },
   {
@@ -444,12 +444,23 @@
    "source": [
     "## Batch Size\n",
     "\n",
-    "Batch size determines how many observations the model is shown before it calculates loss/error and updates the model weights via gradient descent. You're looking for a sweet spot here where you're showing it enough observations that you have enough information to updates the weights, but not such a large batch size that you don't get a lot of weight update iterations performed in a given epoch. Feed-forward Neural Networks aren't as sensitive to bach_size as other networks, but it is still an important hyperparameter to tune. Smaller batch sizes will also take longer to train. "
+    "Batch size determines how many observations the model is shown before it calculates loss/error and updates the model weights via gradient descent. You're looking for a sweet spot here where you're showing it enough observations that you have enough information to updates the weights, but not such a large batch size that you don't get a lot of weight update iterations performed in a given epoch. Feed-forward Neural Networks aren't as sensitive to bach_size as other networks, but it is still an important hyperparameter to tune. Smaller batch sizes will also take longer to train. \n",
+    "\n",
+    "Traditionally, batch size is set in powers of 2 starting at 32 up to 512. Keras defaults to a batch size of 32 if you do not specify it. Yann LeCun famously Twitted: \n",
+    "\n",
+    "> Training with large minibatches is bad for your health.\n",
+    "More importantly, it's bad for your test error.\n",
+    "Friends dont let friends use minibatches larger than 32.\n",
+    "\n",
+    "Check out this paper for more reference on his tweet. https://arxiv.org/abs/1804.07612. \n",
+    "\n",
+    "Check out this SO question on why batch size is typically set in powers of two: https://datascience.stackexchange.com/questions/20179/what-is-the-advantage-of-keeping-batch-size-a-power-of-2\n",
+    "\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 10,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -460,25 +471,16 @@
     "outputId": "ae996575-78e2-43fb-9dbe-5d44aaf0b430"
    },
    "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
-      "  warnings.warn(CV_WARNING, FutureWarning)\n"
-     ]
-    },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Best: 0.65234375 using {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.65234375, Stdev: 0.033298728782667764 with: {'batch_size': 10, 'epochs': 20}\n",
-      "Means: 0.6263020833333334, Stdev: 0.01813592223591682 with: {'batch_size': 20, 'epochs': 20}\n",
-      "Means: 0.6041666666666666, Stdev: 0.037782859709757574 with: {'batch_size': 40, 'epochs': 20}\n",
-      "Means: 0.5533854166666666, Stdev: 0.03210632293213009 with: {'batch_size': 60, 'epochs': 20}\n",
-      "Means: 0.61328125, Stdev: 0.024079742199097563 with: {'batch_size': 80, 'epochs': 20}\n",
-      "Means: 0.5611979166666666, Stdev: 0.038450060052691144 with: {'batch_size': 100, 'epochs': 20}\n"
+      "Best: 0.6274425029754639 using {'batch_size': 32, 'epochs': 20}\n",
+      "Means: 0.6274425029754639, Stdev: 0.06777371027621543 with: {'batch_size': 32, 'epochs': 20}\n",
+      "Means: 0.5652321636676788, Stdev: 0.0672931122182917 with: {'batch_size': 64, 'epochs': 20}\n",
+      "Means: 0.5885239005088806, Stdev: 0.052434982283063036 with: {'batch_size': 128, 'epochs': 20}\n",
+      "Means: 0.5039385497570038, Stdev: 0.09013194735473495 with: {'batch_size': 256, 'epochs': 20}\n",
+      "Means: 0.5077243089675904, Stdev: 0.08855690157292835 with: {'batch_size': 512, 'epochs': 20}\n"
      ]
     }
    ],
@@ -521,7 +523,7 @@
     "# param_grid = dict(batch_size=batch_size, epochs=epochs)\n",
     "\n",
     "# define the grid search parameters\n",
-    "param_grid = {'batch_size': [10, 20, 40, 60, 80, 100],\n",
+    "param_grid = {'batch_size': [32,64,128,256,512],\n",
     "              'epochs': [20]}\n",
     "\n",
     "# Create Grid Search\n",
@@ -541,43 +543,74 @@
    "cell_type": "markdown",
    "metadata": {
     "colab_type": "text",
-    "id": "pmABfjlvXbqi"
+    "id": "EKcuY6OiaLfz"
    },
    "source": [
-    "## Epochs\n",
+    "## Optimizer\n",
     "\n",
-    "The number of training epochs has a large and direct affect on the accuracy, However, more epochs is almost always goign to better than less epochs. This means that if you tune this parameter at the beginning and try and maintain the same value all throughout your training, you're going to be waiting a long time for each iteration of GridSearch. I suggest picking a fixed moderat # of epochs all throughout your training and then Grid Searching this parameter at the very end. "
+    "Remember that there's a different optimizers [optimizers](https://keras.io/optimizers/). At some point, take some time to read up on them a little bit. \"adam\" usually gives the best results. The thing to know about choosing an optimizer is that different optimizers have different hyperparameters like learning rate, momentum, etc. So based on the optimizer you choose you might also have to tune the learning rate and momentum of those optimizers after that. "
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": 5,
+   "cell_type": "markdown",
    "metadata": {
-    "colab": {
-     "base_uri": "https://localhost:8080/",
-     "height": 26329
-    },
-    "colab_type": "code",
-    "id": "bAmxP3N7TmFh",
-    "outputId": "3ddb08c4-51ac-4eaa-ff39-143397024544"
+    "colab_type": "text",
+    "id": "DG3wq5iOaLig"
    },
+   "source": [
+    "## Learning Rate\n",
+    "\n",
+    "Remember that the Learning Rate is a hyperparameter that is specific to your gradient-descent based optimizer selection. A learning rate that is too high will cause divergent behavior, but a Learning Rate that is too low will fail to converge, again, you're looking for the sweet spot. I would start out tuning learning rates by orders of magnitude: [.001, .01, .1, .2, .3, .5] etc. I wouldn't go above .5, but you can try it and see what the behavior is like. \n",
+    "\n",
+    "Once you have narrowed it down, make the window even smaller and try it again. If after running the above specification your model reports that .1 is the best optimizer, then you should probably try things like [.05, .08, .1, .12, .15] to try and narrow it down. \n",
+    "\n",
+    "It can also be good to tune the number of epochs in combination with the learning rate since the number of iterations that you allow the learning rate to reach the minimum can determine if you have let it run long enough to converge to the minimum. "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Best: 0.7044270833333334 using {'batch_size': 20, 'epochs': 200}\n",
-      "Means: 0.6666666666666666, Stdev: 0.028940248399600087 with: {'batch_size': 20, 'epochs': 20}\n",
-      "Means: 0.6588541666666666, Stdev: 0.028940248399600087 with: {'batch_size': 20, 'epochs': 40}\n",
-      "Means: 0.6848958333333334, Stdev: 0.03498705427745938 with: {'batch_size': 20, 'epochs': 60}\n",
-      "Means: 0.7044270833333334, Stdev: 0.018414239093399672 with: {'batch_size': 20, 'epochs': 200}\n"
+      "Best: 0.6548765063285827 using {'epochs': 100, 'learning_rate': 0.001}\n",
+      "Means: 0.6548765063285827, Stdev: 0.025685443533032128 with: {'epochs': 100, 'learning_rate': 0.001}\n",
+      "Means: 0.6367286443710327, Stdev: 0.07908793530699246 with: {'epochs': 100, 'learning_rate': 0.01}\n",
+      "Means: 0.6511586427688598, Stdev: 0.05244526932680711 with: {'epochs': 100, 'learning_rate': 0.1}\n",
+      "Means: 0.6511586427688598, Stdev: 0.05244526932680711 with: {'epochs': 100, 'learning_rate': 0.2}\n",
+      "Means: 0.6511586427688598, Stdev: 0.05244526932680711 with: {'epochs': 100, 'learning_rate': 0.3}\n",
+      "Means: 0.6498599529266358, Stdev: 0.05413510687376454 with: {'epochs': 100, 'learning_rate': 0.5}\n"
      ]
     }
    ],
    "source": [
+    "from tensorflow.keras.optimizers import Nadam\n",
+    "\n",
+    "\n",
+    "# Function to create model, required for KerasClassifier\n",
+    "def create_model(learning_rate=.01):\n",
+    "    # create model\n",
+    "    model = Sequential()\n",
+    "    model.add(Dense(12, input_dim=8, activation='relu'))\n",
+    "    model.add(Dense(1, activation='sigmoid'))\n",
+    "    # Compile model\n",
+    "    optimizer= Nadam(learning_rate = learning_rate)\n",
+    "    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
+    "    return model\n",
+    "\n",
+    "# create model\n",
+    "model = KerasClassifier(build_fn=create_model, verbose=0)\n",
+    "\n",
+    "# define the grid search parameters\n",
+    "# batch_size = [10, 20, 40, 60, 80, 100]\n",
+    "# param_grid = dict(batch_size=batch_size, epochs=epochs)\n",
+    "\n",
     "# define the grid search parameters\n",
-    "param_grid = {'batch_size': [20],\n",
-    "              'epochs': [20, 40, 60,200]}\n",
+    "param_grid = {'learning_rate': [.001, .01, .1, .2, .3, .5],\n",
+    "              'epochs': [100]}\n",
     "\n",
     "# Create Grid Search\n",
     "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=1)\n",
@@ -589,35 +622,7 @@
     "stds = grid_result.cv_results_['std_test_score']\n",
     "params = grid_result.cv_results_['params']\n",
     "for mean, stdev, param in zip(means, stds, params):\n",
-    "    print(f\"Means: {mean}, Stdev: {stdev} with: {param}\")"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "EKcuY6OiaLfz"
-   },
-   "source": [
-    "## Optimizer\n",
-    "\n",
-    "Remember that there's a different optimizers [optimizers](https://keras.io/optimizers/). At some point, take some time to read up on them a little bit. \"adam\" usually gives the best results. The thing to know about choosing an optimizer is that different optimizers have different hyperparameters like learning rate, momentum, etc. So based on the optimizer you choose you might also have to tune the learning rate and momentum of those optimizers after that. "
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "colab_type": "text",
-    "id": "DG3wq5iOaLig"
-   },
-   "source": [
-    "## Learning Rate\n",
-    "\n",
-    "Remember that the Learning Rate is a hyperparameter that is specific to your gradient-descent based optimizer selection. A learning rate that is too high will cause divergent behavior, but a Learning Rate that is too low will fail to converge, again, you're looking for the sweet spot. I would start out tuning learning rates by orders of magnitude: [.001, .01, .1, .2, .3, .5] etc. I wouldn't go above .5, but you can try it and see what the behavior is like. \n",
-    "\n",
-    "Once you have narrowed it down, make the window even smaller and try it again. If after running the above specification your model reports that .1 is the best optimizer, then you should probably try things like [.05, .08, .1, .12, .15] to try and narrow it down. \n",
-    "\n",
-    "It can also be good to tune the number of epochs in combination with the learning rate since the number of iterations that you allow the learning rate to reach the minimum can determine if you have let it run long enough to converge to the minimum. "
+    "    print(f\"Means: {mean}, Stdev: {stdev} with: {param}\") "
    ]
   },
   {
@@ -730,44 +735,41 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import wandb\n",
+    "from wandb.keras import WandbCallback"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
    "metadata": {},
    "outputs": [
     {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/lambda-ds7/boston\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/lambda-ds7/boston/runs/whw09rro\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston/runs/whw09rro</a><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": [
-       "W&B Run: https://app.wandb.ai/lambda-ds7/boston/runs/whw09rro"
-      ]
-     },
-     "execution_count": 6,
-     "metadata": {},
-     "output_type": "execute_result"
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "/bin/sh: 1: wandb: not found\n"
+     ]
     }
    ],
    "source": [
-    "import wandb\n",
-    "from wandb.keras import WandbCallback"
+    "!wandb login b7b6327df2a61f96856324533374853ec9b52665"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": null,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
@@ -777,143 +779,9 @@
     "id": "GMXVfmzXp1Oo",
     "outputId": "b05e251e-508f-46e6-865b-f869ae2a5dc4"
    },
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/lambda-ds7/boston\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/lambda-ds7/boston/runs/kkgdtc31\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston/runs/kkgdtc31</a><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Train on 270 samples, validate on 134 samples\n",
-      "Epoch 1/50\n",
-      "270/270 [==============================] - 1s 3ms/sample - loss: 492.3539 - mse: 492.3539 - mae: 20.3197 - val_loss: 481.5445 - val_mse: 481.5445 - val_mae: 19.6138\n",
-      "Epoch 2/50\n",
-      "270/270 [==============================] - 0s 591us/sample - loss: 239.4999 - mse: 239.4999 - mae: 12.8064 - val_loss: 113.8561 - val_mse: 113.8561 - val_mae: 8.2962\n",
-      "Epoch 3/50\n",
-      "270/270 [==============================] - 0s 618us/sample - loss: 56.2921 - mse: 56.2921 - mae: 5.8988 - val_loss: 62.7912 - val_mse: 62.7912 - val_mae: 5.6465\n",
-      "Epoch 4/50\n",
-      "270/270 [==============================] - 0s 613us/sample - loss: 29.4994 - mse: 29.4994 - mae: 3.9653 - val_loss: 37.9256 - val_mse: 37.9256 - val_mae: 4.1730\n",
-      "Epoch 5/50\n",
-      "270/270 [==============================] - 0s 608us/sample - loss: 20.6919 - mse: 20.6919 - mae: 3.3022 - val_loss: 31.7489 - val_mse: 31.7489 - val_mae: 3.7113\n",
-      "Epoch 6/50\n",
-      "270/270 [==============================] - 0s 602us/sample - loss: 17.2701 - mse: 17.2701 - mae: 3.0291 - val_loss: 27.3921 - val_mse: 27.3921 - val_mae: 3.4958\n",
-      "Epoch 7/50\n",
-      "270/270 [==============================] - 0s 671us/sample - loss: 15.5172 - mse: 15.5172 - mae: 2.8537 - val_loss: 25.3208 - val_mse: 25.3208 - val_mae: 3.3650\n",
-      "Epoch 8/50\n",
-      "270/270 [==============================] - 0s 661us/sample - loss: 13.7548 - mse: 13.7548 - mae: 2.7089 - val_loss: 23.8920 - val_mse: 23.8920 - val_mae: 3.2746\n",
-      "Epoch 9/50\n",
-      "270/270 [==============================] - 0s 606us/sample - loss: 12.3745 - mse: 12.3745 - mae: 2.5662 - val_loss: 22.1294 - val_mse: 22.1294 - val_mae: 3.1509\n",
-      "Epoch 10/50\n",
-      "270/270 [==============================] - 0s 614us/sample - loss: 11.2424 - mse: 11.2424 - mae: 2.4804 - val_loss: 20.5718 - val_mse: 20.5718 - val_mae: 3.0461\n",
-      "Epoch 11/50\n",
-      "270/270 [==============================] - 0s 605us/sample - loss: 10.6098 - mse: 10.6098 - mae: 2.4178 - val_loss: 20.3467 - val_mse: 20.3467 - val_mae: 3.0251\n",
-      "Epoch 12/50\n",
-      "270/270 [==============================] - 0s 576us/sample - loss: 10.0011 - mse: 10.0011 - mae: 2.3257 - val_loss: 18.4283 - val_mse: 18.4283 - val_mae: 2.8938\n",
-      "Epoch 13/50\n",
-      "270/270 [==============================] - 0s 666us/sample - loss: 9.1287 - mse: 9.1287 - mae: 2.2384 - val_loss: 18.2024 - val_mse: 18.2024 - val_mae: 2.9116\n",
-      "Epoch 14/50\n",
-      "270/270 [==============================] - 0s 603us/sample - loss: 8.6211 - mse: 8.6211 - mae: 2.1980 - val_loss: 17.4749 - val_mse: 17.4749 - val_mae: 2.8290\n",
-      "Epoch 15/50\n",
-      "270/270 [==============================] - 0s 463us/sample - loss: 8.4558 - mse: 8.4558 - mae: 2.2087 - val_loss: 17.7878 - val_mse: 17.7878 - val_mae: 2.8516\n",
-      "Epoch 16/50\n",
-      "270/270 [==============================] - 0s 626us/sample - loss: 8.3626 - mse: 8.3626 - mae: 2.2031 - val_loss: 16.7101 - val_mse: 16.7101 - val_mae: 2.7820\n",
-      "Epoch 17/50\n",
-      "270/270 [==============================] - 0s 607us/sample - loss: 7.9180 - mse: 7.9180 - mae: 2.1265 - val_loss: 16.6064 - val_mse: 16.6064 - val_mae: 2.7419\n",
-      "Epoch 18/50\n",
-      "270/270 [==============================] - 0s 479us/sample - loss: 7.5552 - mse: 7.5552 - mae: 2.0235 - val_loss: 17.2872 - val_mse: 17.2872 - val_mae: 2.8539\n",
-      "Epoch 19/50\n",
-      "270/270 [==============================] - 0s 616us/sample - loss: 7.0971 - mse: 7.0971 - mae: 2.0038 - val_loss: 16.5110 - val_mse: 16.5110 - val_mae: 2.8042\n",
-      "Epoch 20/50\n",
-      "270/270 [==============================] - 0s 606us/sample - loss: 6.7068 - mse: 6.7068 - mae: 1.9539 - val_loss: 15.5886 - val_mse: 15.5886 - val_mae: 2.7048\n",
-      "Epoch 21/50\n",
-      "270/270 [==============================] - 0s 461us/sample - loss: 6.8542 - mse: 6.8542 - mae: 1.9979 - val_loss: 17.2378 - val_mse: 17.2378 - val_mae: 2.8853\n",
-      "Epoch 22/50\n",
-      "270/270 [==============================] - 0s 474us/sample - loss: 6.5719 - mse: 6.5719 - mae: 1.9312 - val_loss: 16.3043 - val_mse: 16.3043 - val_mae: 2.7756\n",
-      "Epoch 23/50\n",
-      "270/270 [==============================] - 0s 478us/sample - loss: 6.6161 - mse: 6.6161 - mae: 1.9572 - val_loss: 15.7992 - val_mse: 15.7992 - val_mae: 2.7219\n",
-      "Epoch 24/50\n",
-      "270/270 [==============================] - 0s 491us/sample - loss: 7.1269 - mse: 7.1269 - mae: 2.0137 - val_loss: 16.5402 - val_mse: 16.5402 - val_mae: 2.8005\n",
-      "Epoch 25/50\n",
-      "270/270 [==============================] - 0s 479us/sample - loss: 6.3382 - mse: 6.3382 - mae: 1.8540 - val_loss: 16.5034 - val_mse: 16.5034 - val_mae: 2.7864\n",
-      "Epoch 26/50\n",
-      "270/270 [==============================] - 0s 488us/sample - loss: 5.9442 - mse: 5.9442 - mae: 1.8251 - val_loss: 15.6558 - val_mse: 15.6558 - val_mae: 2.7102\n",
-      "Epoch 27/50\n",
-      "270/270 [==============================] - 0s 604us/sample - loss: 5.5832 - mse: 5.5832 - mae: 1.7432 - val_loss: 15.3021 - val_mse: 15.3021 - val_mae: 2.6862\n",
-      "Epoch 28/50\n",
-      "270/270 [==============================] - 0s 436us/sample - loss: 5.4530 - mse: 5.4530 - mae: 1.7354 - val_loss: 15.4570 - val_mse: 15.4570 - val_mae: 2.6846\n",
-      "Epoch 29/50\n",
-      "270/270 [==============================] - 0s 441us/sample - loss: 5.3070 - mse: 5.3070 - mae: 1.7079 - val_loss: 15.8510 - val_mse: 15.8510 - val_mae: 2.7644\n",
-      "Epoch 30/50\n",
-      "270/270 [==============================] - 0s 477us/sample - loss: 5.4157 - mse: 5.4157 - mae: 1.7321 - val_loss: 15.9160 - val_mse: 15.9160 - val_mae: 2.7134\n",
-      "Epoch 31/50\n",
-      "270/270 [==============================] - 0s 452us/sample - loss: 5.2639 - mse: 5.2639 - mae: 1.6981 - val_loss: 15.3554 - val_mse: 15.3554 - val_mae: 2.6662\n",
-      "Epoch 32/50\n",
-      "270/270 [==============================] - 0s 475us/sample - loss: 5.7687 - mse: 5.7687 - mae: 1.8045 - val_loss: 15.7151 - val_mse: 15.7151 - val_mae: 2.6867\n",
-      "Epoch 33/50\n",
-      "270/270 [==============================] - 0s 462us/sample - loss: 5.5210 - mse: 5.5210 - mae: 1.7367 - val_loss: 15.4227 - val_mse: 15.4227 - val_mae: 2.6561\n",
-      "Epoch 34/50\n",
-      "270/270 [==============================] - 0s 474us/sample - loss: 5.5663 - mse: 5.5663 - mae: 1.7294 - val_loss: 15.3376 - val_mse: 15.3376 - val_mae: 2.6991\n",
-      "Epoch 35/50\n",
-      "270/270 [==============================] - 0s 626us/sample - loss: 5.0063 - mse: 5.0063 - mae: 1.6196 - val_loss: 15.2642 - val_mse: 15.2642 - val_mae: 2.6796\n",
-      "Epoch 36/50\n",
-      "270/270 [==============================] - 0s 459us/sample - loss: 4.7251 - mse: 4.7251 - mae: 1.5727 - val_loss: 15.4858 - val_mse: 15.4858 - val_mae: 2.7288\n",
-      "Epoch 37/50\n",
-      "270/270 [==============================] - 0s 604us/sample - loss: 4.6394 - mse: 4.6394 - mae: 1.5854 - val_loss: 15.1139 - val_mse: 15.1139 - val_mae: 2.6305\n",
-      "Epoch 38/50\n",
-      "270/270 [==============================] - 0s 592us/sample - loss: 4.5669 - mse: 4.5669 - mae: 1.5548 - val_loss: 14.9898 - val_mse: 14.9898 - val_mae: 2.6340\n",
-      "Epoch 39/50\n",
-      "270/270 [==============================] - 0s 458us/sample - loss: 4.4480 - mse: 4.4480 - mae: 1.5334 - val_loss: 15.6389 - val_mse: 15.6389 - val_mae: 2.7337\n",
-      "Epoch 40/50\n",
-      "270/270 [==============================] - 0s 455us/sample - loss: 4.4119 - mse: 4.4119 - mae: 1.5426 - val_loss: 15.0723 - val_mse: 15.0723 - val_mae: 2.6709\n",
-      "Epoch 41/50\n",
-      "270/270 [==============================] - 0s 473us/sample - loss: 4.0797 - mse: 4.0797 - mae: 1.4725 - val_loss: 15.4706 - val_mse: 15.4706 - val_mae: 2.6707\n",
-      "Epoch 42/50\n",
-      "270/270 [==============================] - 0s 449us/sample - loss: 4.0619 - mse: 4.0619 - mae: 1.4692 - val_loss: 15.2423 - val_mse: 15.2423 - val_mae: 2.6165\n",
-      "Epoch 43/50\n",
-      "270/270 [==============================] - 0s 465us/sample - loss: 4.1861 - mse: 4.1861 - mae: 1.5076 - val_loss: 15.7510 - val_mse: 15.7510 - val_mae: 2.7279\n",
-      "Epoch 44/50\n",
-      "270/270 [==============================] - 0s 462us/sample - loss: 4.1128 - mse: 4.1128 - mae: 1.4810 - val_loss: 15.4814 - val_mse: 15.4814 - val_mae: 2.6562\n",
-      "Epoch 45/50\n",
-      "270/270 [==============================] - 0s 441us/sample - loss: 4.2171 - mse: 4.2171 - mae: 1.5205 - val_loss: 16.3839 - val_mse: 16.3839 - val_mae: 2.8194\n",
-      "Epoch 46/50\n",
-      "270/270 [==============================] - 0s 422us/sample - loss: 4.2609 - mse: 4.2609 - mae: 1.5548 - val_loss: 15.3587 - val_mse: 15.3587 - val_mae: 2.7161\n",
-      "Epoch 47/50\n",
-      "270/270 [==============================] - 0s 454us/sample - loss: 4.4635 - mse: 4.4635 - mae: 1.5440 - val_loss: 15.7736 - val_mse: 15.7736 - val_mae: 2.7184\n",
-      "Epoch 48/50\n",
-      "270/270 [==============================] - 0s 426us/sample - loss: 3.7406 - mse: 3.7406 - mae: 1.4147 - val_loss: 15.6718 - val_mse: 15.6718 - val_mae: 2.7468\n",
-      "Epoch 49/50\n",
-      "270/270 [==============================] - 0s 445us/sample - loss: 3.6173 - mse: 3.6173 - mae: 1.3816 - val_loss: 15.7291 - val_mse: 15.7291 - val_mae: 2.7789\n",
-      "Epoch 50/50\n",
-      "270/270 [==============================] - 0s 430us/sample - loss: 3.6303 - mse: 3.6303 - mae: 1.4266 - val_loss: 15.4937 - val_mse: 15.4937 - val_mae: 2.7390\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<tensorflow.python.keras.callbacks.History at 0x7f315c319be0>"
-      ]
-     },
-     "execution_count": 8,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
-    "wandb.init(project=\"boston\", entity=\"lambda-ds7\") #Initializes and Experiment\n",
+    "wandb.init(project=wandb_project, entity=wand_group) #Initializes and Experiment\n",
     "\n",
     "# Important Hyperparameters\n",
     "X =  x_train\n",
@@ -941,6 +809,33 @@
     "         )"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Your Turn\n",
+    "\n",
+    "Pick a few hyparameters that we *have not* tuned. Using the same code above, try changing a few parameters you're interested in and submitting the results to weights & biases. :) "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "wandb.init(project=wandb_project, entity=wand_group) #Initializes and Experiment\n",
+    "\n",
+    "wandb.config.epochs = 50\n",
+    "wandb.config.batch_size = 10\n",
+    "\n",
+    "\n",
+    "# Fit Model\n",
+    "model.fit(\n",
+    "          callbacks=[WandbCallback()]\n",
+    "         )"
+   ]
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -963,7 +858,18 @@
    "source": [
     "## Overview\n",
     "\n",
-    "Basically `GridSearchCV` takes forever. You'll want to adopt a slightly more sophiscated strategy."
+    "Basically `GridSearchCV` takes forever. You'll want to adopt a slightly more sophiscated strategy.\n",
+    "\n",
+    "Let's also take a look at an alternative with Keras-Tuner."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "!pip install keras-tuner"
    ]
   },
   {
@@ -975,123 +881,81 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
-    "sweep_config = {\n",
-    "    'method': 'random',\n",
-    "    'parameters': {\n",
-    "        'learning_rate': {'distribution': 'normal'},\n",
-    "        'epochs': {'distribution': 'uniform',\n",
-    "                    'min': 100,\n",
-    "                    'max': 1000},\n",
-    "        'batch_size': {'distribution': 'uniform',\n",
-    "            'min': 10,\n",
-    "            'max': 400}\n",
-    "    }\n",
-    "}"
+    "from tensorflow import keras\n",
+    "from tensorflow.keras import layers\n",
+    "from kerastuner.tuners import RandomSearch\n",
+    "\n",
+    "\"\"\"\n",
+    "This model Tunes:\n",
+    "- Number of Neurons in the Hidden Layer\n",
+    "- Learning Rate in Adam\n",
+    "\n",
+    "\"\"\"\n",
+    "\n",
+    "def build_model(hp):\n",
+    "    model = keras.Sequential()\n",
+    "    model.add(layers.Dense(units=hp.Int('units',\n",
+    "                                        min_value=32,\n",
+    "                                        max_value=512,\n",
+    "                                        step=32),\n",
+    "                           activation='relu'))\n",
+    "    model.add(layers.Dense(10, activation='softmax'))\n",
+    "    model.compile(\n",
+    "        optimizer=keras.optimizers.Adam(\n",
+    "            hp.Choice('learning_rate',\n",
+    "                      values=[1e-2, 1e-3, 1e-4])),\n",
+    "        loss='sparse_categorical_crossentropy',\n",
+    "        metrics=['accuracy'])\n",
+    "    \n",
+    "    return model"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Create sweep with ID: huau0u9r\n",
-      "Sweep URL: https://app.wandb.ai/lambda-ds7/boston/sweeps/huau0u9r\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config)"
+    "tuner = RandomSearch(\n",
+    "    build_model,\n",
+    "    objective='val_accuracy',\n",
+    "    max_trials=5,\n",
+    "    executions_per_trial=3,\n",
+    "    directory='./keras-tuner-trial',\n",
+    "    project_name='helloworld')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
-    "import wandb\n",
-    "from wandb.keras import WandbCallback\n",
-    "#Initializes and Experiment\n",
-    "\n",
-    "from tensorflow.keras.optimizers import Adam\n",
-    "\n",
-    "# Important Hyperparameters\n",
-    "X =  x_train\n",
-    "y =  y_train\n",
-    "\n",
-    "inputs = X.shape[1]\n",
-    "\n",
-    "def train():\n",
-    "    \n",
-    "    wandb.init(project=\"boston\", entity=\"lambda-ds7\") \n",
-    "    \n",
-    "    config = wandb.config\n",
-    "\n",
-    "    # Create Model\n",
-    "    model = Sequential()\n",
-    "    model.add(Dense(64, activation='relu', input_shape=(inputs,)))\n",
-    "    model.add(Dense(64, activation='relu'))\n",
-    "    model.add(Dense(64, activation='relu'))\n",
-    "    model.add(Dense(1))\n",
-    "\n",
-    "    # Optimizer \n",
-    "    adam = Adam(learning_rate=config.learning_rate)\n",
-    "\n",
-    "    # Compile Model\n",
-    "    model.compile(optimizer=adam, loss='mse', metrics=['mse', 'mae'])\n",
-    "\n",
-    "    # Fit Model\n",
-    "    model.fit(X, y, \n",
-    "              validation_split=0.33, \n",
-    "              epochs=config.epochs, \n",
-    "              batch_size=config.batch_size, \n",
-    "              callbacks=[WandbCallback()]\n",
-    "             )"
+    "tuner.search_space_summary()"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "wandb: Agent Starting Run: 2g77kp6k with config:\n",
-      "\tbatch_size: 308.503347845309\n",
-      "\tepochs: 704.9395850579006\n",
-      "\tlearning_rate: 1.480005523005428\n",
-      "wandb: Agent Started Run: 2g77kp6k\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/lambda-ds7/boston\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/lambda-ds7/boston/runs/t4w9l4ye\" target=\"_blank\">https://app.wandb.ai/lambda-ds7/boston/runs/t4w9l4ye</a><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
+   "outputs": [],
+   "source": [
+    "tuner.search(x, y,\n",
+    "             epochs=5,\n",
+    "             validation_data=(val_x, val_y))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
    "source": [
-    "wandb.agent(sweep_id, function=train)"
+    "tuner.results_summary()"
    ]
   },
   {
@@ -1153,9 +1017,9 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "DataSearch",
+   "display_name": "U4-S2-NN (Python3)",
    "language": "python",
-   "name": "datasearch"
+   "name": "u4-sprint2"
   },
   "language_info": {
    "codemirror_mode": {
